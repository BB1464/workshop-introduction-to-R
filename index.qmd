---
title: "Training on Statistics and Data Analysis using R 👨‍💻"
author: "Oluwafemi Oyedele"
subtitle: "Post Graduate Students, CPEB Club, \nUniversity of Ibadan"
date: "2023-08-19"
footer:  "[Statistics and Data Analysis using R](https://github.com/BB1464/workshop-introduction-to-R) 👨‍💻"
logo: "img/ui.jpg"
header-logo: "img/rlogo.png"
filters:
  - reveal-header
  - quarto
auto-stretch: false
#css: logo.css
format: 
   revealjs: 
    theme: [solarized, slides.scss]
    highlight-style: a11y
    transition: fade
    slide-number: true
    show-slide-number: all
    chalkboard: true
    code-annotations: hover
    code-link: true
    #multiplex: true
    #slide-tone: false
    #auto-slide: 2000
    #loop: true
    #footer: https://bb1464.github.io/workshop-introduction-to-R/
editor: visual
execute:
  freeze: auto
---

**About me**✍️✍️✍️

::: incremental
::: columns
::: {.column width="60%"}
-   I am an Agrometeorologist and Processed-Based Modeller

-   I am a mentor in the R4DS online learning community

-   I am also a active member of the TidyTuesday project

-   `r fontawesome::fa("linkedin")`: [Oluwafemi Oyedele](https://www.linkedin.com/in/oluwafemioyedele)

-   `r fontawesome::fa("twitter")`: [\@OluwafemOyedele](https://twitter.com/OluwafemOyedele) `r emoji::emoji("thumbsup")`

-   `r fontawesome::fa("github")` [github.com/BB1464](https://github.com/BB1464/workshop-introduction-to-R)

-   `r fontawesome::fa("globe")` [bb1464.github.io](https://bb1464.github.io/oluwafemi-oyedele/)
:::

::: {.column width="40%"}
![](img/pix.jpg){style="float:right;padding: 0 0 0 10px;" fig-alt="Headshot of Dr. Maria Tackett" width="300"}
:::
:::
:::

::: notes
-   I am an Agrometeorologist with a bit of background in Crop modelling

-   I am an R Studio and Carpentaries Instructor
:::

```{r}
library(fontawesome)
library(emoji)
```

## My R journey (so far 👨‍💻👨‍💻👨‍💻️ {.test}

![](img/RlearningPath.png){.absolute top="70" right="70" width="530" height="530"}

## Learning Objectives✍️✍️✍️


::: incremental
-   Installation of R and R Studio

-   Introduction to R and R Studio.

-   Data Import and Export

-   Data summary (Simple Descriptive analysis)

-   Data wrangling
:::

## Overview {.test}

::: incremental
-   By the end of this training, you should feel confident approaching data from the agricultural sector using R

-   We will cover virtually no statistics

-   However it is the intention that this training will leave you comfortable to:

    -   understand/solve statistical problems using R

    -   interpret results generated by R
    
:::

## Installation

![](img/installation.png){.stacked-img .absolute top="100" right="100" width="530" height="530"}

## **Install R and R Studio**)

::: columns
::: {.column width="35%"}
-   The first thing you need to do is download the R and R Studio software. Go to the [(https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/) and download the software for your operating system (Windows, Mac, or Linux).
:::

::: {.column width="65%"}
![](img/install_R.png){style="float:right;padding: 0 0 0 5px;" fig-alt="Headshot of Dr. Maria Tackett" width="370"}
:::
:::

## RStudio Installation Cont.

![](img/rstudioinstallation.png){fig-align="center"}

## **Download Training Material from Github**

::: incremental
-   **Option 1**: Download the zip file directly from github and then unzip it

-   **Option 2**: Run the following command below in RStudio console pane:

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "1|2|3"
install.packages("usethis")
library(usethis) # This line loads the usethis package into R memory
use_course("https://github.com/BB1464/workshop-introduction-to-R.git") # this line will pull all the source code from my github repo into your system.

```

-   You'll now have a copy of the project created for this training on your computer.
:::

## Congratulation We are now set for the Training !!!

![](https://media.giphy.com/media/uGjzzKY4BhtKw/giphy.gif){.absolute top="100" right="100" width="530" height="530"}

## **What is R**💥💥💥 {.test}

::: columns
::: {.column width="40%"}
![](img/rlogo.png){style="float:right;padding: 0 0 0 10px;" fig-alt="Headshot of Dr. Maria Tackett" width="500"}
:::

::: {.column width="60%"}
::: incremental
-   A widely used programming language for data analysis

-   Based on statistical programming language S (1976)

-   Developed by Ross Ihaka & Robert Gentleman (1995)

-   Very active community, with many packages

-   Open source, and interoperable!
:::
:::
:::

## **If one already knows Stata or similar software, why use R?**😂😂😂

::: incremental
-   R is *free*, so you don't need a terminal server

-   R has a *very* large community.

-   R can handle virtually any data format.

-   Analyses done using R are reproducible

-   Using R makes collaboration easier.

-   Finding answers to questions is much simpler in R
:::

## **What is R Studio** ️👁️‍🗨️👁️‍🗨️👁️‍🗨️ {.test}

::: columns
::: {.column width="40%"}
![](img/RStudio-Logo.png){style="float:right;padding: 0 0 0 10px;" fig-alt="Headshot of Dr. Maria Tackett" width="500"}
:::

::: {.column width="60%"}
::: incremental
-   Integrated Development Environment (IDE) for R that can make your life *easier*.

-   Founded by J.J. Allaire, available since 2010
:::
:::
:::

## **RStudio can:**💥💥💥

::: incremental
-   Organize your code, output, and plots.

-   Auto-complete code and highlight syntax.

-   Help view data and objects.

-   Enable easy integration of R code into documents with `quarto` and `R Markdown`
:::

## Open R Studio {.test}

-   We should see something like this

![](https://moderndive.netlify.app/images/rstudio_screenshots/rstudio.png){fig-align="center" width="600"}

## R Studio Interface {.test}

::: {layout="[[-1], [1], [-1]]"}
![](img/rstudio-incremental.png){fig-align="center" width="700"}
:::

## **Demonstration**👨‍💻👨‍💻👨‍💻

::: incremental
-   Demontration on the various tabs found in R and R Studio.
:::

## **Working Directly in R Console** {.test}

::: incremental
1.  Enter: 2 + 2

2.  Hit return

3.  View result

4.  We can create new object with the assignment (`<-`) operator

5.  **R is case sensitive**
:::

## Your Turn {.test}

::: incremental
-   Open RStudio and try the following tasks:

-   Pick a number and add 2 to it

-   Multiply the result by 3

-   Subtract 6 from the result of step 2

-   Divide the result of step 3 by 3

-   What do you think `factorial(round(2.0015) + 1)` will return?
:::

## Working Directories {.test}

::: {.incremental}
- R saves files and looks for files to open in your current `working directory`.

```{r}
#| echo: true

getwd()

```
:::

## Functions and Help {.test}

::: {.incremental}
- `sqrt()` is an example of a `function` in R

```{r}
#| echo: true
#| eval: false


?sqrt
```

:::

## Creating Objects {.test}

::: {.incremental}
- R stores everything as an object, including data, models and output.

- We can create an object using the assignment operator `<-`

```{r}
#| echo: true

new_object <- 125

new_object
```
:::

## Using Ojects {.test}

::: {.incremental}
- An objects name represents the information stored in it.
```{r}
#| echo: true


new_object + 10


new_object + new_object


sqrt(new_object)
```
:::


## **R Studio Projects** {.test}

::: incremental
-   RStudio projects allow you to keep a collection of files all together, including:

-   R scripts

-   Quarto and Rmarkdown files (more on those soon)

-   Data files

-   And much more!
:::

## **How to Create a Project** {.test}

::: incremental
-   File -\> New Project

-   Give the project a unique name

-   Set the directory where you want to put the project.

-   Quit RStudio, Double-click .Rproj file to reopen project
:::

## **Your Turn** {.test}

::: incremental
-   Create a new project (doesn't matter if it's in a new or existing directory

-   Quit RStudio, double-click the .Rproj file and reopen your project
:::

## Working directory {.test}

::: incremental
-   When you start R, it associates itself with a folder (i.e, directory) on your computer:

-   This folder is known as your "working directory

-   When you save files, R will save them here

-   When you load files, R will look for them here
:::

## Changing the Working directory {.test}

::: incremental
-   First option: Navigate in the files pane to a new directory. Click More\>Set As Working Directory

-   Second option: In the toolbar, go to Session\>Set Working Directory\>Choose Directory...
:::

## File Types in R {.test}

There are **two main file types** that you'll work with:

::: incremental
::: columns
::: {.column width="50%"}
-   **R scripts (.R)**

-   Text is assumed to be executable R code unless you comment it

-   **Quarto files (.qmd)**

-   Text is assumed to be text unless you put it in a code chunk (more on this soon)
:::

::: {.column width="50%"}
![](img/code-chunk.png){style="float:right;padding: 0 0 0 12px;" fig-alt="Headshot of Oluwafemi" width="1200"}
:::
:::
:::

## **R Scripts** {.test}

::: incremental
-   Create new script file: File -\> New File -\> R Script
:::

![](img/new-script.gif){style="float:right;padding: 10 10 10 20px;" fig-alt="Oluwafemi" width="770" layout-valign="center"}

## **How to Run Code** {.test}

::: incremental
-   Run the code: control + enter on Windows, command + enter on Mac keystrokes or use Run button
:::

![](img/run-code.gif){layout-valign="center" width="55%"}

## **How to Run Code Continuation**

::: incremental
-   Note that you don't have to highlight code.

-   You can just hit run anywhere on line to run code.
:::

## **Comments** {.test}

-   Do them for others, and for your future self.

```{r}
#| echo: true
#| eval: false

# This is a comment

head(data, n = 5)

```

## **Packages** {.test}

::: incremental
::: columns
::: {.column width="60%"}
-   An R package is a collection of functions, data and documentation that extends the capability of base R.

-   Packages add functionality that is not present in base R.

-   They're where much of the power of R is found.
:::

::: {.column width="40%"}
![](img/phone-apps.png){style="float:right;padding: 0 0 0 10px;" width="300"}
:::
:::
:::

## **Packages We'll Use** {.test}

::: columns
::: {.column width="40%"}
![](img/tidyverse.png)
:::

::: {.column width="60%"}
### `tidyverse`

::: incremental
-   The [`tidyverse`](https://tidyverse.org/) is a collection of packages.

-   We'll use [`readr`](https://readr.tidyverse.org/) to import data.
:::
:::
:::

## **Packages We'll Use** {.test}

::: columns
::: {.column width="40%"}
![](img/skimr.png)
:::

::: {.column width="60%"}
### `skimr`

::: incremental
-   [`skimr`](https://github.com/ropensci/skimr) provides easy summary statistics.
:::
:::
:::

## **Install Packages** {.test}

-   The syntax to install packages is as follows.

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "1|2"
install.packages("tidyverse")
install.packages("skimr")

```

::: incremental
-   The package name must be in quotes.

-   Packages should be installed **once per computer** (i.e. once you've installed a package, you don't need to do it again on the same computer).
:::

## **Load Packages** {.test}

-   To load packages, use the following syntax:

```{r}
#| eval: true
#| echo: true


library(tidyverse)
library(skimr)

```

::: incremental
-   Package names don't need to be quoted here (though they can be).

-   Packages should be loaded **once per session** (i.e. every time you start working in R, you need to load any packages you want to use).
:::

## **Your Turn** {.test}

-   Open the project you downloaded before (it should be on your desktop)

-   Open the readme.md file

-   Install all the packages

-   Load the **tidyverse** and **skimr** packages using the **library function**

## **Data Science Workflow in R by (Hadley Wickham)**

![](img/data-science-workflow.png)

## Data Import {.test}

```{r}
#| echo: true
#| code-line-numbers: "0|1|3|5|7"
#| eval: true


library(tidyverse) # data wrangling and cleaning

library(here)  # For Easy Navigation of file path

library(readxl) # To import excel file into R

library(skimr) # For summary statistics
```

::: incremental
-   To read in a csv file into R we will use `read_csv`

-   To read in an excel file into R we will use `read_excel`

-   To write a csv file to disc we will use `write_csv`

-   To write a excel file to disc we will use `write_xlsx` from `writexl package`
:::

## 

::: panel-tabset
## Data Import

```{r sorghum_dataset}
#| echo: true
#| code-line-numbers: "0|1"

sorghum<-read_csv(here::here('data/sorghum.csv')) 

# Congratulation you have successfully read a csv file into R and we assigned it to an object called sorghum
```

::: notes
Demo using `file.choose()` function to get the file path and to import data.
:::

## Table

```{r table}
#| echo: true
#| code-line-numbers: "0|1|2|3|4"

sorghum %>% 
  head(2)
sorghum %>% 
  tail(2)
#- Import sorghum.xlsx into RStudio
```
:::

## R is Case Sensitive

::: columns
::: {.column width="50%"}
**Option**

-   snake_case

-   camelCase

-   periods.in.names
:::

::: {.column width="50%"}
**Example**

-   student_data

-   studentData

-   student.data
:::
:::

## Data Import Practicals {.test}

-   Import `sorghum.xlsx` into RStudio and assigned it to an object called `sorghnum_dat.`

-   View the first 6 rows of the dataset.

-   View the last 6 rows of the dataset.

## **Data Types**

::: incremental
-   **Double/Numeric** (e.g. 2.5)

-   **Character** (e.g. "Male")

-   **Logical** (e.g. "TRUE and FALSE")
:::

## Data Frames {.test}

::: incremental
-   A `data frame` is a two dimensional group of R objects.

-   Each column in a `data frame` can be a different type

-   We can think of a data frame as R's equivalent to the Excel spreadsheet because it stores data in a similar format.

-   Creating a `data frame` by hand takes a lot of typing, but we can do it with the `data.frame` function
:::

## Data Frame Example {.test}

```{r}
#| echo: true
#| code-line-numbers: "1|2|3|4|6|8"
#| code-overflow: scroll

df <- data.frame(
  face = c("ace", "two", "six"),
  suit = c("clubs", "clubs", "clubs"),
  value = c(1, 2, 3)
)

df

class(df)
```

## Inspection of a Data Frame Object {.test}

```{r}
#| echo: true
#| code-line-numbers: "2|3|4"

typeof(df)
class(df)
str(df)
```

## Inspection of a Data Frame Object Cont.

```{r}
#| echo: true
#| code-line-numbers: "2|3"

class(df)
str(df)
```

## What is tidy data? {.test}

::: incremental
-   Data that is easy to model, visualise and aggregate (i.e. works well with lm, ggplot, and dplyr)

-   A step along the road to clean data
:::

![](img/tidydata.png)

## The Philosophy of Tidy Data {.test}

::: incremental
Data can be **messy** or **tidy**. Messy data can be in a number of different ways, but tidy data is any dataset where:

-   Each variable is a column; each column is a variable

-   Each observation is a row; each row is an observation

-   Each value is a cell; each cell is a single value
:::

## Tidy Data Example {.test}

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| warning: false
#| message: false
#| code-line-numbers: "1|3"
#| code-overflow: scroll
library(tidyr)

table1

```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| warning: false
#| message: false
#| code-line-numbers: "1|3"
#| code-overflow: scroll
library(tidyr)

head(table3,6)

```
:::
:::

## Making Table3 to Tidy Data {.test}

```{r}
#| echo: true
#| warning: false
#| message: false
#| code-line-numbers: "1|2|3|4|5"
#| code-overflow: scroll
library(dplyr)
library(tidyr)
table3 %>%
  separate(col = c(rate), into = c('Cases', 'Population'))

```

## Data in column names {.test}

```{r}
#| echo: true
#| warning: false
#| message: false
#| code-line-numbers: "1|2|3"
#| code-overflow: scroll
library(dplyr)
library(tidyr)
head(billboard)
```

## Pivot Longer Function from Tidyr {.test}

```{r}
#| echo: true
#| warning: false
#| message: false
#| code-line-numbers: "1|2|3|4"
#| code-overflow: scroll
library(dplyr)
library(tidyr)
billboard %>%
  pivot_longer(cols = starts_with('wk'),
               names_to = 'Week',
               values_to = 'Rank')
```

## How to Drop Missing Values {.test}

```{r}
#| echo: true
#| warning: false
#| message: false
#| code-line-numbers: "1|2|3|4|5|6"
#| code-overflow: scroll
library(dplyr)
library(tidyr)
billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank",
    values_drop_na = TRUE
  )
```

## How Does Pivot Longer Works {.test}

![](https://r4ds.hadley.nz/diagrams/tidy-data/variables.png)

## Pivot Wider {.test}

```{r}
#| echo: true
#| warning: false
#| message: false
#| code-overflow: scroll
#| code-line-numbers: "1|2|3|4"
library(dplyr)
library(tidyr)
df <- tribble(
  ~id, ~measurement, ~value,
  "A",        "bp1",    100,
  "B",        "bp1",    140,
  "B",        "bp2",    115, 
  "A",        "bp2",    120,
  "A",        "bp3",    105
)
```

## Pivot Wider Example {.test}

```{r}
#| echo: true
#| warning: false
#| message: false
#| code-line-numbers: "1|2|3|4"
#| code-overflow: scroll
library(dplyr)
library(tidyr)
df |> 
  pivot_wider(
    names_from = measurement,
    values_from = value
  )
```

## How Does Pivot Wider Works {.test}

![](https://epirhandbook.com/en/images/pivoting/pivot_wider_new.png)

## Summary Statistics of the dataset

::: panel-tabset
## Code

```{r}
#| echo: true
#| code-line-numbers: "1|2"
#| code-overflow: scroll
library(skimr)
output <- skim(iris)
```

## Result

```{r}
print(output)
# - I found this to be very useful when performing EDA but we will explore other options during data viz.
```
:::

## Data Transformation {.test}

::: incremental
-   There are five key dplyr functions in tidyverse to solve most of data manipulation challenges:

-   Pick observations by their values -- `filter()`

-   Reorder (sort) the rows -- `arrange()`

-   Pick variables by their names -- `select()`

-   Create new variables with functions of existing variables -- `mutate()`

-   Collapse many values down to a summary -- `summarize()`
:::

## Data Transformation: `Filter`

::: incremental
-   `filter()` allows to subset observations based on their values

-   `filter(data, expressions)`

-   The first argument is the name of the data frame The second and subsequent arguments are the expressions that filter the data frame

-   To use filter effectively we need to make proper use of the comparison operators i.e. (`>`,`>=`,`<`,`<=`,`!=` and `==`)
:::

## Data Transformation: `Filter` {.test}

::: panel-tabset
## Filter

```{r}
#| echo: true
#| code-line-numbers: "1|2|3"

sorghum <- read.csv(file = here::here('data/sorghum.csv'))

head(sorghum)

```

## Output

```{r}
#| echo: true
#| code-line-numbers: "1|2"

sorghum %>% 
  filter(env=='E1')

```
:::

## Data Transformation: `Filter` {.test}

-   What does the following command do?

```{r}
#| echo: true
#| code-line-numbers: "1|3"
sorghum <- read.csv(file = here::here('data/sorghum.csv'))

filter(sorghum, env %in% c('E1','E2'))
```

## Data Transformation: `Filter` Practical `5 minutes`

-   import `mtcars.csv` data into RStudio

-   `filter` for `mpg<20` and `gear==4`

## Data Transformation: Arrange {.test}

-   `arrange()` changes the order of the rows (sorting): it takes a data frame and a set of column names to order by

```{r}
#| echo: true
#| code-line-numbers: "1"
head(arrange(mtcars, mpg),10)
```

## Data Transformation: Arrange {.test}

We can use the function desc() to re-order by a column in descending order

```{r}
#| echo: true
#| code-line-numbers: "1"
arrange(mtcars, desc(mpg))

```

## Data Transformation: `Select` {.test}

-   Select help us to pick variable by their position or name in a `dataframe`.

-   We can also used other `select` helpers function like `start_with`, `end_with`, `contains` and `everything`

```{r}
#| echo: true
#| code-line-numbers: "1|2"
mtcars_demo <- select(mtcars, mpg, cyl, disp)
mtcars_demo
```

## Data Transformation: `Mutate` {.test}

-   We can add new columns that are functions of existing columns with `mutate()` which always adds new columns at the end of the dataset

```{r}
mtcars %>% 
  mutate(mpg_trans=log10(mpg)) %>% 
  head(10)
```

## Data Transformation: `Summaries` {.test}

-   `summarize()` collapses a data frame to a single or few row(s)

```{r}
summarize(mtcars, mpg_mean = mean(mpg, na.rm = TRUE))
```

-   `summarize()` is useful with `group_by()`

```{r}
#| echo: true
#| code-line-numbers: "1|2"
by_treatment <- group_by(iris, Species)
summarise(by_treatment, Sepal.Length_mean = mean(Sepal.Length, na.rm = TRUE))
```

## Data Transformation: The pipe `%>%` {.test}

::: incremental
- The pipe help us to combine multiple operations together.

- The pipe makes code easy to read.
:::

```{r}
#| echo: true
#| code-line-numbers: "1|2|3"
iris %>%
group_by(Species) %>%
summarise(mean_Sepal.Length = mean(Sepal.Length, na.rm = TRUE))
```

## How to use Pipes to Clean up your R Code

![](https://www.rforecology.com/post/how-to-use-pipes/featured_hubecef9b286df4afcc3d745fb42639d5c_96728_720x0_resize_lanczos_2.png)

## Data Transformation: Count {.test}

```{r}
#| echo: true
#| code-line-numbers: "1|2|3"
iris %>%
group_by(Species) %>%
summarise(n = n())
```

## Data Wrangling: Practical {.test}

-   Import `sorghum.xlsx` to R and save to an object named example03

-   How many observations do we have per environment?

-   How many `environment?` `genotypes?` Display the list of locations and the list of `genotypes respectively?`

-   Display the data where the `yield was less than 150?`

-   Select `env`, `gen`, `yield`, to be saved in a new object `example03.short` and create a new variable `mean_yield` by by computing the mean of the `yield.`

## Summary {.test}

::: incremental
-   filter: pick rows matching criteria

-   select: pick columns by name

-   arrange: reorder rows

-   mutate: add new variables

-   summarise: reduce variables to values
:::

## **Getting Help** {.test}

-   We can use the ? to get help about anything we are confused about in R.

```{r}
#| echo: true
#| eval: false
?read_csv

```

## Tidyverse Website {.test}

![](img/tidyverse-website.gif)(https://www.tidyverse.org/)

## Package Vignettes {.test}

![](img/skimr-vignette.gif) (https://cran.r-project.org/web/packages/skimr/vignettes/Using_skimr.html)

## Twitter {.test}

![](img/rstats-twitter.gif)(https://twitter.com/search?q=%23rstats)

## **R for Data Science Community** {.test}

```{r,fig.align='center',fig.height=20,fig.width=15}
knitr::include_graphics(path = here::here('img/r4ds-website.png'))
```

## Google {.test}

![](img/programming-google.png)(https://twitter.com/ekaleedmiston/status/1081221822186696706)

## Finding more functions and packages {.test}

[R Documentation](https://www.rdocumentation.org/)

## Rseek to look for help {.test}

<https://rseek.org/>

## R Cheat Sheet {.test}

[R Cheat Sheet](https://www.RStudio.com/resources/cheatsheets/)

## Chat GPT {.test}

![](img/gpt.jpg){.stacked-img}

## Resources to Learn More {.test}

::: incremental
-   [R4DS Book](https://r4ds.hadley.nz/)

-   [ModernDive](https://moderndive.netlify.app)

-   [BigBookofR](https://www.bigbookofr.com)

-   [Data carpentary](https://datacarpentry.org/R-ecology-lesson/)

-   [Awesome R Learning Resources](https://awesome-r.com/)

-   [R Cookbook](http://www.cookbook-r.com/)

-   [Stat545](http://stat545.com/)

-   [RLadies Video Feed on YouTube](https://ivelasq.github.io/rladies-video-feed/)
:::

## **QUESTIONS?**

::: incremental
::: columns
::: {.column width="60%"}
-   `r fontawesome::fa("linkedin")`: [Oluwafemi Oyedele](https://www.linkedin.com/in/oluwafemioyedele)

-   `r fontawesome::fa("twitter")`: [\@OluwafemOyedele](https://twitter.com/OluwafemOyedele) `r emoji::emoji("thumbsup")`

-   `r fontawesome::fa("github")` [github.com/BB1464](https://github.com/BB1464/workshop-introduction-to-R)

-   `r fontawesome::fa("globe")` [bb1464.github.io](https://bb1464.github.io/oluwafemi-oyedele/)

-   `r fontawesome::fa("briefcase")` [r4ds-slack-channel](http://r4ds.io/join)
:::

::: {.column width="40%"}
![](img/pix.jpg){style="float:right;padding: 0 0 0 10px;" fig-alt="Headshot of Oluwafemi" width="300"}
:::
:::
:::
