mtcars %>%
mutate(mpg_trans=log10(mpg)) %>%
head(10)
summarize(mtcars, mpg_mean = mean(mpg, na.rm = TRUE))
by_treatment <- group_by(sorghum, env)
write.csv(x = iris,file = here::here('data/iris.csv'))
write.csv(x = iris,file = here::here('data/iris.csv'),row.names = F)
library(metrica)
install.packages("metrica")
library(metrica)
browseVignettes("metrica")
head(dat,1)
library(tidyverse)
library(metrica)
head(mtcars,1)
scatter_plot(data = mtcars,obs = mpg,pred = disp)
scatter_plot(data = mtcars,obs = mpg,pred = mpg)
scatter_plot(data = mtcars,obs = mpg,pred =hp)
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = c('R2','RMSE'))
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = c('R2','RMSE'),position_metrics = c(x=120,y=170))
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = c('R2','RMSE'),position_metrics = c(x=12,y=17))
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = c('R2','RMSE'),position_metrics = c(x=200,y=170))
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = c('R2','RMSE'),position_metrics = c(x=200,y=170),position_eq = c(x=100,y=150))
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = c('R2','RMSE'),position_metrics = c(x=200,y=170),position_eq = c(x=100,y=150),regline_size = 5)
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = c('R2','RMSE'),position_metrics = c(x=2,y=170),position_eq = c(x=100,y=150),regline_size = 5)
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = c('R2','RMSE'),position_metrics = c(x=50,y=170),position_eq = c(x=100,y=150),regline_size = 5)
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = c('R2','RMSE'),position_metrics = c(x=50,y=170),position_eq = c(x=100,y=150),regline_size = 5)+scale_x_log10()
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = c('R2','RMSE'),position_metrics = c(x=50,y=170),position_eq = c(x=100,y=150),regline_size = 5)+scale_y_log10()
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = c('R2','RMSE'),position_metrics = c(x=50,y=170),position_eq = c(x=100,y=150),regline_size = 5)+scale_x_sqrt()
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = c('R2','RMSE'),position_metrics = c(x=50,y=170),position_eq = c(x=100,y=150),regline_size = 5)
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = c('R2','RMSE'),position_metrics = c(x=250,y=170),position_eq = c(x=100,y=150),regline_size = 5)
set_metric <- metrics_summary(metrics_list = c('RMSE','R2'))
set_metric <- c('RMSE','R2')
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = set_metric,position_metrics = c(x=250,y=170),position_eq = c(x=100,y=150),regline_size = 5)
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = set_metric,position_metrics = c(x=250,y=120),position_eq = c(x=100,y=150),regline_size = 5)
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = set_metric,position_metrics = c(x=250,y=100),position_eq = c(x=100,y=150),regline_size = 5)
scatter_plot(data = mtcars,obs = mpg,pred =hp,metrics_list = set_metric,position_metrics = c(x=5,y=7),position_eq = c(x=100,y=150),regline_size = 5)
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=150),regline_size = 5)
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=150),regline_size = 5,print_metrics = TRUE)
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=150),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric)
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=150),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170))
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170))
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170),orientation = "PO)
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170),orientation = "PO")
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170),orientation = "OP")
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170),orientation = "PO")
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170),orientation = "PO",print_eq = TRUE)
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170),orientation = "PO",print_eq = TRUE,shape_type = 20)
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170),orientation = "PO",print_eq = TRUE,shape_type = 21)
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170),orientation = "PO",print_eq = TRUE,shape_type = 21,shape_size = 5)
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170),orientation = "PO",print_eq = TRUE,shape_type = 21,shape_size = 5,eq_color = 'blue')
scatter_plot(data = iris,obs = Sepal.Length,pred =Sepal.Width,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170),orientation = "PO",print_eq = TRUE,shape_type = 21,shape_size = 5,eq_color = 'blue')
set_metric <- c('RMSE','R2')
scatter_plot(data = iris,obs = Sepal.Length,pred =Sepal.Width,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170),orientation = "PO",print_eq = TRUE,shape_type = 21,shape_size = 5,eq_color = 'blue')
set_metric <- c('RMSE','R2')
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170),orientation = "PO",print_eq = TRUE,shape_type = 21,shape_size = 5,eq_color = 'blue')
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170),orientation = "PO",print_eq = TRUE,shape_type = 21,shape_size = 5,eq_color = 'blue')+scale_y_log10()
scatter_plot(data = mtcars,obs = mpg,pred =hp,position_eq = c(x=100,y=250),regline_size = 5,print_metrics = TRUE,metrics_list = set_metric,position_metrics = c(x=250,y=170),orientation = "PO",print_eq = TRUE,shape_type = 21,shape_size = 5,eq_color = 'blue')
library(tidymodels)
decision_tree()
linear_reg()
logistic_reg()
boost_tree()
iris %>% gsub('e','',Species)
iris %>% gsub('e','',iris)
iris$Species %>% gsub('e','',iris)
iris$Species %>% gsub('e','',iris$Species)
?gsub
t1 <- c('0 kg P','37.5 kg P','75 kg P')
t2 <- c('TME419','TMS581')
plan4 <- agricolae::design.split(trt1 = t1,trt2 = t2,r = 4,seed = 123)
plan4$book
phosphorus <- c('0 kg P','37.5 kg P','75 kg P')
varieties <- c('TME419','TMS581')
plan4 <- agricolae::design.split(phosphorus = t1,trt2 = varieties,r = 4,seed = 123)
plan4 <- agricolae::design.split(t1=phosphorus ,trt2 = varieties,r = 4,seed = 123)
plan4 <- agricolae::design.split(trt1 = phosphorus,trt2 = varieties,r = 4,seed = 123)
plan4$book
factor(phosphorus)
varieties <- factor(varieties,levels = c('TME419','TMS581'))
phosphorus <- factor(phosphorus,levels = c('0 kg P','37.5 kg P','75 kg P'))
plan4 <- design.split(trt1 = phosphorus,trt2 = varieties,r = 4,seed = 123)
library(agricolae)
plan4 <- design.split(trt1 = phosphorus,trt2 = varieties,r = 4,seed = 123)
plan4 <- plan4$book
View(plan4)
plan4
plan4 <- design.split(trt1 = phosphorus,trt2 = varieties,r = 4,seed = 123)
plan4$book
plan4 <- plan4$book
View(plan4)
phosphorus <- c('0 kg P','37.5 kg P','75 kg P')
phosphorus <- factor(phosphorus,levels = c('0 kg P','37.5 kg P','75 kg P'))
varieties <- c('TME419','TMS581')
varieties <- factor(varieties,levels = c('TME419','TMS581'))
plan4 <- design.split(trt1 = phosphorus,trt2 = varieties,r = 4,seed = 123)
plan4 <- plan4$book
View(plan4)
?design.alpha()
trt <- 1:30 # Treatment
t <- length(trt)
t
30/3
?design.lsd()
varieties<-c("perricholi","yungay","maria bonita","tomasa")
outdesign <-design.lsd(varieties,serie=2,seed=23)
lsd <- outdesign$book
print(outdesign$sketch)
plots <-as.numeric(lsd[,1])
print(matrix(plots,byrow = TRUE, ncol = 4))
library(tidyverse)
library(agridat)
library(factoextra)
data(steptoe.morex.pheno)
dat <- steptoe.morex.pheno
dat <- as_tibble(dat)
dat
summary(dat)
levels(dat$env)
#Let's consider only one env - "ID91"
dat.ID91 <- dat %>%
filter(env=="ID91") %>%
droplevels()
dat.ID91
#lodging is missing for ALL genotype
summary(dat.ID91)
#Drop/Remove lodging
dat.ID91 <- dat.ID91 %>%
select(-lodging)
names(dat.ID91)
#Good practice
dat.ID91 <- na.omit(dat.ID91)
#Keep the names of the genotypes
dat.ID91.label <- dat.ID91$gen
#Remove/Delete gen & env column
dat.ID91$gen <- NULL
dat.ID91$env <- NULL
dat.ID91
#Standardize the data
dat.ID91.sc <- scale(dat.ID91)
summary(dat.ID91.sc)
#Distance metric
dist.ID91 <- dist(dat.ID91.sc, method = 'euclidean')
#Hierarchical Classification
hclust.ID91 <- hclust(dist.ID91, method = 'ward.D2')
#Visualize the dendrogram
plot(hclust.ID91)
#Add genotype labels
plot(hclust.ID91, hang = -1, labels = dat.ID91.label)
#Add boarder
rect.hclust(hclust.ID91, k = 3, border = "red")
#Visualize the clusters with colours
library(dendextend)
dend.ID91 <- as.dendrogram(hclust.ID91)
col.dend.ID91 <- color_branches(dend.ID91, k = 3)
#Visualize the clusters
plot(col.dend.ID91)
#Add genotype labels
labels(col.dend.ID91) <- dat.ID91.label
plot(col.dend.ID91)
fviz_dend(x = hclust.ID91,k = 3)
fviz_dend(x = hclust.ID91,k = 3,guide='none')
fviz_dend(x = hclust.ID91,k = 3,guide='none',label=dat.ID91.label)
fviz_dend(x = hclust.ID91,k = 3,guide='none',label='dat.ID91.label')
#Get cluster membership
cut.ID91 <- cutree(hclust.ID91, k = 3)
cut.ID91
#Add cluster membership to the original data
dat.ID91 <- dat.ID91 %>%
mutate(cluster = cut.ID91)
dat.ID91
#Aggregate the data by cluster membership
dat.ID91.summary <- dat.ID91 %>%
group_by(cluster) %>%
summarize(
m_amylase=mean(amylase, na.rm=TRUE),
m_diapow=mean(diapow, na.rm=TRUE),
m_hddate=mean(hddate, na.rm=TRUE),
m_malt=mean(malt, na.rm=TRUE),
m_height=mean(height, na.rm=TRUE),
m_protein=mean(protein, na.rm=TRUE),
m_yield=mean(yield, na.rm=TRUE),
N_Obs=n()
)
dat.ID91.summary
library(tidyverse)
iris %>% mutate(across(.cols=c(5),.fns=gsub('tos','',Species)))
vec <- c('123e','143e','145s')
str(vec)
gsub(pattern = 'es',replacement = '',x = vec)
gsub(pattern = 'e',replacement = '',x = vec)
gsub(pattern = 'e',replacement = '',x = vec,fixed = TRUE)
gsub(pattern = 'es',replacement = '',x = vec,fixed = TRUE)
gsub(pattern = 'es',replacement = '',x = vec,fixed = TRUE,ignore.case = FALSE)
str_replace(string = vec,pattern = 'es',replacement = '')
str_replace(string = vec,pattern = 'e',replacement = '')
str_replace_all(string = vec,pattern = 'e',replacement = '')
str_replace_all(string = vec,pattern = 'es',replacement = '')
str_replace_all(string = vec,pattern = 'e*s',replacement = '')
str_replace_all(string = vec,pattern = 's',replacement = '')
str_replace_all(string = vec,pattern = 's',replacement = '') %>% gsub('e',replacement = '',x = vec)
str(iris)
str(iris$Species)
iris$Species <- as.character(iris$Species)
str(iris$Species)
iris$Species <- gsub(pattern = 's',replacement = '',x = iris$Species)
head(iris$Species)
View(iris)
2023-2011
sqrt(200/2)
library(tidymodels)
lr_spec <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
lr_fit <- lr_spec %>%
fit(
Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,
data = Smarket
)
library(tidymodels)
library(ISLR) # For the Smarket data set
library(ISLR2) # For the Bikeshare data set
install.packages(c("ISLR", "ISLR2"))
library(tidymodels)
library(ISLR) # For the Smarket data set
library(ISLR2) # For the Bikeshare data set
library(discrim)
lr_fit <- lr_spec %>%
fit(
Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,
data = Smarket
)
lr_fit
lr_fit %>%
pluck("fit") %>%
summary()
lr_fit %>%
pluck("fit") %>%
anova()
lm_spec <- linear_reg() %>%
set_mode("regression") %>%
set_engine("lm")
lm_fit <- lm_spec %>%
fit(medv ~ lstat, data = Boston)
lm_fit
lm_fit %>%
pluck("fit") %>%
summary()
lm_fit %>%
pluck("fit") %>%
anova()
library(tidyverse)
library(googlesheets4)
library(ggwordcloud)
dat <- read_sheet('https://docs.google.com/spreadsheets/d/11uPkcVN9cEdyJlgNEugHlSI2w0IACeLk_wm5_NNOqak/edit#gid=0')
head(dat)
library(tidyverse)
library(googlesheets4)
library(ggwordcloud)
View(dat)
2+2
head(Dat)
head(dat)
?sqrt
?mean
1+1
1+1 # this is one plus one
library(tidyverse)
library(tidyverse) # data wrangling and cleaning
library(here)  # For Easy Navigation of file path
library(readxl) # To import excel file into R
library(skimr) # For summary statistics
?read_csv
read_csv(here::here('data/sorghum.csv'))
sorghum<-read_csv(here::here('data/sorghum.csv'))
View(sorghum)
getwd()
library(readxl)
sorghum <- read_excel("data/sorghum.xlsx")
View(sorghum)
head(dat)
head(sorghum,2)
'data/iris.csv'
read_csv('data/iris.csv')
dat <- read_csv(file.choose())
class(2.5)
class(2)
class(0.46)
str(sorghum)
glimpse(sorghum)
str(sorghum)
Str(sorghum)
sorghum$env
length(sorghum$gen)
count(sorghum$gen)
sorghum$env
class(TRUE)
class('Male')
class(F)
class('Daniel')
data.frame(PlantHeight=c(4,7,6,14))
data.frame(Variety=c('TME419','TMS581'),PlantHeight=c(4,7,6,14))
class(data.frame(Variety=c('TME419','TMS581'),PlantHeight=c(4,7,6,14)))
data.frame(Variety=c('TME419','TMS581'),PlantHeight=c(4,7,6))
data.frame(Variety=c('TME419','TMS581','TME419','TMS581'),PlantHeight=c(4,7,6,14))
typeof(sorghum)
class(sorghum)
View(sorghum)
library(dplyr)
library(tidyr)
table3
table3 %>%
separate(col = c(rate), into = c('Cases', 'Population'),sep = '/')
table3 %>%
separate(col = c(rate), into = c('Cases', 'Population'))
head(billboard)
View(billboard)
billboard
billboard %>%
pivot_longer(cols = starts_with('wk'),
names_to = 'Weeks',
values_to = 'Plant_Height')
billboard %>%
pivot_longer(cols = starts_with('wk'),
names_to = 'Weeks',
values_to = 'Plant_Height',values_drop_na = TRUE)
billboard %>%
pivot_longer(cols = starts_with('wk'),
names_to = 'Weeks',
values_to = 'Plant_Height',values_drop_na = TRUE) %>%
View()
?billboard
billboard
View(billboard)
billboard %>%
pivot_longer(cols = starts_with('wk'),
names_to = 'Weeks',
values_to = 'Plant_Height',values_drop_na = TRUE) %>%
View()
sessionInfo()
billboard %>%
pivot_longer(cols = starts_with('wk'),
names_to = 'Weeks',
values_to = 'Plant_Height',values_drop_na = TRUE) %>%
View()
df <- tribble(
~id, ~measurement, ~value,
"A",        "bp1",    100,
"B",        "bp1",    140,
"B",        "bp2",    115,
"A",        "bp2",    120,
"A",        "bp3",    105
)
df
df %>% pivot_wider(names_from = measurement,values_from = value)
df %>% pivot_wider(names_from = measurement,values_from = value) %>% View()
df %>% pivot_wider(id_cols = id,names_from = measurement,values_from = value) %>% View()
df
df %>% pivot_wider(id_cols = id,names_from = measurement,values_from = value)
?pivot_wider
library(skimr)
output <- skim(iris)
output
View(iris)
sorghum <- read.csv(file = here::here('data/sorghum.csv'))
filter(.data = sorghum,env=c('E1','E2'))
filter(.data = sorghum,env==c('E1','E2'))
sample(x = c(1:3),size = 1)
data(mtcars)
filter(.data= mtcars, mpg<20, gear == 4)
head(mtcars)
filter(mtcars, mpg<20, gear == 4)
filter(mtcars, mpg<20, gear == c(4))
head(arrange(mtcars, mpg),10)
head(arrange(mtcars, -mpg),10)
arrange(mtcars, desc(mpg))
mtcars %>%
mutate(mpg_log=log10(mpg))
mtcars
mtcars %>%
mutate(mpg_log=log10(mpg))
by_treatment <- group_by(iris, Species)
View(by_treatment)
summarise(by_treatment, Sepal.Length_mean = mean(Sepal.Length, na.rm = TRUE))
iris %>%
group_by(Species) %>%
summarise(Sepal.Length_mean=mean(Sepal.Length))
iris %>%
summarise(Sepal.Length_mean=mean(Sepal.Length),.by = Species)
iris %>%
summarise(mean(Sepal.Length),.by = Species)
iris %>%
summarise(Sepal.Length_mean=mean(Sepal.Length),.by = Species)
colSums(is.na(iris))
dat_mis <- data.frame(Height=c(NA,NA,4,10,20,NA,15))
head(dat_mis)
mean(x = dat_mis$Height)
mean(x = dat_mis$Height,na.rm = T)
browseVignettes('skimr')
browseVignettes('tidyverse')
# Load the Iris dataset
data(iris)
# Split the dataset into training and testing sets
set.seed(123)  # For reproducibility
sample_indices <- sample(1:nrow(iris), 0.7 * nrow(iris))  # 70% for training, 30% for testing
train_data <- iris[sample_indices, ]
test_data <- iris[-sample_indices, ]
# Fit a linear model using the training data
linear_model <- lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = train_data)
# Summarize the linear model
summary(linear_model)
# Summarize the linear model
anova(linear_model)
devtools::install_github("https://github.com/petergandenberger/dashboard-builder")
dashboardBuilder::run_app()
# install.packages("devtools")
devtools::install_github("petergandenberger/gridstackeR")
# install.packages("devtools")
devtools::install_github("petergandenberger/gridstackeR",force = TRUE)
dashboardBuilder::run_app()
data(iris)
dashboardBuilder::run_app()
library(gridstackeR)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(ggplot2)
library(tidyr)
library(dplyr)
ui <- dashboardPage(
title = "Dashboard-Builder Demo",
dashboardHeader(),
dashboardSidebar(disable = TRUE),
dashboardBody(
useShinyjs(),
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "styles.css")
),
grid_stack(
dynamic_full_window_height = TRUE,
grid_stack_item(
h = 9, w = 5, x = 5, y = 0, id = "c_dt_3338745", style = "overflow:hidden",
box(
title = "Element6452160", status = "primary", solidHeader = TRUE, width = 12,
height = "100%", collapsible = F,
DT::dataTableOutput(outputId = 'dt_3338745'))),
grid_stack_item(
h = 9, w = 5, x = 0, y = 0, id = "c_plot_1608675", style = "overflow:hidden",
box(
title = "Element4786941", status = "primary", solidHeader = TRUE, width = 12,
height = "100%", collapsible = F,
plotOutput(outputId = "plot_1608675", height = "100%")))
)
server <- function(input, output, session) {
dat <- readRDS("data.RDS")
output$dt_3338745 <- DT::renderDataTable({
data_selected <- dplyr::select(dat, weight, Time, Chick)
DT::datatable(data_selected, rownames = FALSE, options = list(paging = FALSE, searching = FALSE))
})
output$plot_1608675 <- renderPlot({
ggplot(dat) +
aes(x = Chick, y = Diet) +
geom_tile(size = 1.2) +
theme_minimal()
})
}
shinyApp(ui, server)
library(gridstackeR)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(ggplot2)
library(tidyr)
library(dplyr)
ui <- dashboardPage(
title = "Dashboard-Builder Demo",
dashboardHeader(),
dashboardSidebar(disable = TRUE),
dashboardBody(
useShinyjs(),
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "styles.css")
),
grid_stack(
dynamic_full_window_height = TRUE,
grid_stack_item(
h = 9, w = 5, x = 5, y = 0, id = "c_dt_3338745", style = "overflow:hidden",
box(
title = "Element6452160", status = "primary", solidHeader = TRUE, width = 12,
height = "100%", collapsible = F,
DT::dataTableOutput(outputId = 'dt_3338745'))),
grid_stack_item(
h = 9, w = 5, x = 0, y = 0, id = "c_plot_1608675", style = "overflow:hidden",
box(
title = "Element4786941", status = "primary", solidHeader = TRUE, width = 12,
height = "100%", collapsible = F,
plotOutput(outputId = "plot_1608675", height = "100%")))
)
server <- function(input, output, session) {
dat <- readRDS("data.RDS")
output$dt_3338745 <- DT::renderDataTable({
data_selected <- dplyr::select(dat, weight, Time, Chick)
DT::datatable(data_selected, rownames = FALSE, options = list(paging = FALSE, searching = FALSE))
})
output$plot_1608675 <- renderPlot({
ggplot(dat) +
aes(x = Chick, y = Diet) +
geom_tile(size = 1.2) +
theme_minimal()
})
}
shinyApp(ui, server)
