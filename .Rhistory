# Fit a linear model using the training data
linear_model <- lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = train_data)
# Summarize the linear model
summary(linear_model)
# Summarize the linear model
anova(linear_model)
devtools::install_github("https://github.com/petergandenberger/dashboard-builder")
dashboardBuilder::run_app()
# install.packages("devtools")
devtools::install_github("petergandenberger/gridstackeR")
# install.packages("devtools")
devtools::install_github("petergandenberger/gridstackeR",force = TRUE)
dashboardBuilder::run_app()
data(iris)
dashboardBuilder::run_app()
library(gridstackeR)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(ggplot2)
library(tidyr)
library(dplyr)
ui <- dashboardPage(
title = "Dashboard-Builder Demo",
dashboardHeader(),
dashboardSidebar(disable = TRUE),
dashboardBody(
useShinyjs(),
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "styles.css")
),
grid_stack(
dynamic_full_window_height = TRUE,
grid_stack_item(
h = 9, w = 5, x = 5, y = 0, id = "c_dt_3338745", style = "overflow:hidden",
box(
title = "Element6452160", status = "primary", solidHeader = TRUE, width = 12,
height = "100%", collapsible = F,
DT::dataTableOutput(outputId = 'dt_3338745'))),
grid_stack_item(
h = 9, w = 5, x = 0, y = 0, id = "c_plot_1608675", style = "overflow:hidden",
box(
title = "Element4786941", status = "primary", solidHeader = TRUE, width = 12,
height = "100%", collapsible = F,
plotOutput(outputId = "plot_1608675", height = "100%")))
)
server <- function(input, output, session) {
dat <- readRDS("data.RDS")
output$dt_3338745 <- DT::renderDataTable({
data_selected <- dplyr::select(dat, weight, Time, Chick)
DT::datatable(data_selected, rownames = FALSE, options = list(paging = FALSE, searching = FALSE))
})
output$plot_1608675 <- renderPlot({
ggplot(dat) +
aes(x = Chick, y = Diet) +
geom_tile(size = 1.2) +
theme_minimal()
})
}
shinyApp(ui, server)
library(gridstackeR)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(ggplot2)
library(tidyr)
library(dplyr)
ui <- dashboardPage(
title = "Dashboard-Builder Demo",
dashboardHeader(),
dashboardSidebar(disable = TRUE),
dashboardBody(
useShinyjs(),
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "styles.css")
),
grid_stack(
dynamic_full_window_height = TRUE,
grid_stack_item(
h = 9, w = 5, x = 5, y = 0, id = "c_dt_3338745", style = "overflow:hidden",
box(
title = "Element6452160", status = "primary", solidHeader = TRUE, width = 12,
height = "100%", collapsible = F,
DT::dataTableOutput(outputId = 'dt_3338745'))),
grid_stack_item(
h = 9, w = 5, x = 0, y = 0, id = "c_plot_1608675", style = "overflow:hidden",
box(
title = "Element4786941", status = "primary", solidHeader = TRUE, width = 12,
height = "100%", collapsible = F,
plotOutput(outputId = "plot_1608675", height = "100%")))
)
server <- function(input, output, session) {
dat <- readRDS("data.RDS")
output$dt_3338745 <- DT::renderDataTable({
data_selected <- dplyr::select(dat, weight, Time, Chick)
DT::datatable(data_selected, rownames = FALSE, options = list(paging = FALSE, searching = FALSE))
})
output$plot_1608675 <- renderPlot({
ggplot(dat) +
aes(x = Chick, y = Diet) +
geom_tile(size = 1.2) +
theme_minimal()
})
}
shinyApp(ui, server)
library(tidyverse)
library(agridat)
library(factoextra)
data(steptoe.morex.pheno)
dat <- steptoe.morex.pheno
dat <- as_tibble(dat)
dat
summary(dat)
levels(dat$env)
#Let's consider only one env - "ID91"
dat.ID91 <- dat %>%
filter(env=="ID91") %>%
droplevels()
#lodging is missing for ALL genotype
summary(dat.ID91)
#Drop/Remove lodging
dat.ID91 <- dat.ID91 %>%
select(-lodging)
names(dat.ID91)
#Good practice
dat.ID91 <- na.omit(dat.ID91)
#Keep the names of the genotypes
dat.ID91.label <- dat.ID91$gen
#Remove/Delete gen & env column
dat.ID91$gen <- NULL
dat.ID91$env <- NULL
dat.ID91
#Standardize the data
dat.ID91.sc <- scale(dat.ID91)
summary(dat.ID91.sc)
#Distance metric
dist.ID91 <- dist(dat.ID91.sc, method = 'euclidean')
#Hierarchical Classification
hclust.ID91 <- hclust(dist.ID91, method = 'ward.D2')
#Visualize the dendrogram
plot(hclust.ID91)
#Add genotype labels
plot(hclust.ID91, hang = -1, labels = dat.ID91.label)
#Add boarder
rect.hclust(hclust.ID91, k = 3, border = "red")
fviz_dend(x = hclust.ID91,k = 3,k_colors = 'aaas')
#Add genotype labels
plot(hclust.ID91, hang = -1, labels = dat.ID91.label)
dend.ID91 <- as.dendrogram(hclust.ID91)
col.dend.ID91 <- color_branches(dend.ID91, k = 3)
#Visualize the clusters with colours
library(dendextend)
dend.ID91 <- as.dendrogram(hclust.ID91)
col.dend.ID91 <- color_branches(dend.ID91, k = 3)
#Visualize the clusters
plot(col.dend.ID91)
fviz_dend(x = hclust.ID91,k = 3,k_colors = 'aaas',show_labels = TRUE)
fviz_dend(x = hclust.ID91,k = 3,k_colors = 'aaas',show_labels = TRUE,label=dat.ID91.label)
fviz_dend(x = hclust.ID91,k = 3,k_colors = 'aaas',label=dat.ID91.label)
#Good practice
dat.ID91 <- na.omit(dat.ID91)
dat.ID91
data(steptoe.morex.pheno)
dat <- steptoe.morex.pheno
dat <- as_tibble(dat)
dat
levels(dat$env)
#Let's consider only one env - "ID91"
dat.ID91 <- dat %>%
filter(env=="ID91") %>%
droplevels()
#lodging is missing for ALL genotype
summary(dat.ID91)
#Drop/Remove lodging
dat.ID91 <- dat.ID91 %>%
select(-lodging)
names(dat.ID91)
#Good practice
dat.ID91 <- na.omit(dat.ID91)
#Remove/Delete gen & env column
#dat.ID91$gen <- NULL
dat.ID91$env <- NULL
dat.ID91
dat.ID91 %>%
group_by(gen) %>%
summarise_all(.funs = ~.)
summary(dat.ID91.sc) %>%
column_to_rownames(var = 'gen')
dat.ID91 %>%
group_by(gen) %>%
summarise_all(.funs = ~mean)
dat.ID91 %>%
group_by(gen) %>%
summarise_all(.funs = mean)
dat.ID91 %>%
group_by(gen) %>%
summarise_all(.funs = ~.) %>%
column_to_rownames(var = 'gen')
dat.ID91 %>%
group_by(gen) %>%
summarise_all(.funs = ~.) %>%
column_to_rownames(var = 'gen')
dat.ID91 <- dat.ID91 %>%
group_by(gen) %>%
summarise_all(.funs = ~.) %>%
column_to_rownames(var = 'gen')
#Standardize the data
dat.ID91.sc <- scale(dat.ID91)
summary(dat.ID91.sc)
#Distance metric
dist.ID91 <- dist(dat.ID91.sc, method = 'euclidean')
#Hierarchical Classification
hclust.ID91 <- hclust(dist.ID91, method = 'ward.D2')
#Visualize the dendrogram
plot(hclust.ID91)
#Add genotype labels
plot(hclust.ID91, hang = -1)
#Add boarder
rect.hclust(hclust.ID91, k = 3, border = "red")
#Add boarder
rect.hclust(hclust.ID91, k = 3, border = "red")
fviz_dend(x = hclust.ID91,k = 3,k_colors = 'aaas')
ggsave(filename = 'cluster.png',plot = last_plot(),path = here::here('plot'),width = 8,height = 8,dpi = 150)
ggsave(
filename = 'cluster.png',
plot = last_plot(),
path = here::here('plot'),
width = 12,
height = 12,
dpi = 150
)
ggsave(
filename = 'cluster.png',
plot = last_plot(),
path = here::here('plot'),
width = 15,
height = 9,
dpi = 150
)
ggsave(
filename = 'cluster.png',
plot = last_plot(),
path = here::here('plot'),
width = 15,
height = 10,
dpi = 150
)
ggsave(
filename = 'cluster.png',
plot = last_plot(),
path = here::here('plot'),
width = 15,
height = 10,
dpi = 100
)
ggsave(
filename = 'cluster.png',
plot = last_plot(),
path = here::here('plot'),
width = 15,
height = 12,
dpi = 100
)
ggsave(
filename = 'cluster.png',
plot = last_plot(),
path = here::here('plot'),
width = 15,
height = 12,
dpi = 170
)
ggsave(
filename = 'cluster.png',
plot = last_plot(),
path = here::here('plot'),
width = 14,
height = 12,
dpi = 170
)
ggsave(
filename = 'cluster.png',
plot = last_plot(),
path = here::here('plot'),
width = 12,
height = 12,
dpi = 170
)
ggsave(
filename = 'cluster.png',
plot = last_plot(),
path = here::here('plot'),
width = 12,
height = 12,
dpi = 120
)
ggsave(
filename = 'cluster.png',
plot = last_plot(),
path = here::here('plot'),
width = 15,
height = 12,
dpi = 120
)
ggsave(
filename = 'cluster.png',
plot = last_plot(),
path = here::here('plot'),
width = 12,
height = 12,
dpi = 120
)
ggsave(
filename = 'cluster.png',
plot = last_plot(),
path = here::here('plot'),
width = 20,
height = 12,
dpi = 120
)
ggsave(
filename = 'cluster.png',
plot = last_plot(),
path = here::here('plot'),
width = 22,
height = 12,
dpi = 120
)
ggsave(
filename = 'cluster.png',
plot = last_plot(),
path = here::here('plot'),
width = 23,
height = 13,
dpi = 120
)
bannerCommenter::banner(x = 'Correlation Analysis in R',emph = TRUE)
data(mtcars)
View(mtcars)
correlation(mtcars)
cor(mtcars)
library(tidyverse)
cor(mtcars) %>%
knitr::kable()
cor(mtcars)  #%>%
Cor <- correlation(data = mtcars)
library(correlation)
library(tidyverse)
library(metan)
Cor <- correlation(data = mtcars)
Cor
summary(object = Cor,redundant=TRUE)
Cor <- correlation(data = mtcars,redundant = FALSE)
Cor
summary(object = Cor,redundant=TRUE)
summary(object = Cor,redundant=FALSE)
Cor <- correlation(data = mtcars)
Cor
summary(object = Cor,redundant=FALSE)
summary(object = Cor,redundant=T)
cor <- cor(mtcars, use="complete.obs")
round(cor,2)
ggcorrplot(cor,
hc.order = TRUE,
type = "lower",
lab = TRUE)
library(ggcorrplot)
ggcorrplot::ggcorrplot(cor,
hc.order = TRUE,
type = "lower",
lab = TRUE)
ggcorrplot::cor_pmat(cor,
hc.order = TRUE,
type = "lower",
lab = TRUE)
ggcorrplot::ggcorrplot(cor,
hc.order = TRUE,
#type = "lower",
lab = TRUE)
ggcorrplot::ggcorrplot(cor,
hc.order = TRUE,
type = "lower",
lab = TRUE)
ggcorrplot::ggcorrplot(cor,
hc.order = TRUE,
type = "lower",
lab = F)
ggcorrplot::ggcorrplot(cor,
hc.order = TRUE,
type = "lower",
lab = TRUE)
p=metan::corr_coef(data = mtcars,type = 'linear',method = 'pearson') %>%
plot()
p
library(tidyverse)
library(factoextra)
pca <- prcomp(mtcars, scale. = TRUE)
plot(pca)
skimr::skim(mtcars)
print(pca)
summary(pca)
iris_pca <- prcomp(mtcars, scale. = TRUE)
mtcars_pca <- prcomp(mtcars, scale. = TRUE)
print(mtcars_pca)
summary(mtcars_pca)
eig.val<-get_eigenvalue(mtcars_pca)
eig.val
fviz_eig(mtcars_pca, col.var="blue")
fviz_eig(mtcars_pca, col.var="blue",addlabels = TRUE)
fviz_screeplot(mtcars_pca, col.var="blue",addlabels = TRUE)
var <- get_pca_var(mtcars_pca)
var
var$coord
fviz_pca_contrib(X = mtcars_pca,choice = 'var',axes = 1:2,)
fviz_contrib(X = mtcars_pca,choice = 'var',axes = 1:2,)
fviz_contrib(X = mtcars_pca,choice = 'var',axes = 1)
fviz_contrib(X = mtcars_pca,choice = 'var',axes = 1) # First
fviz_contrib(X = mtcars_pca,choice = 'var',axes = 2) # Second
fviz_contrib(X = mtcars_pca,choice = 'var',axes = 1:2)
fviz_contrib(X = mtcars_pca,choice = 'var',axes = 1) # First
fviz_contrib(X = mtcars_pca,choice = 'var',axes = 1:2)
a <- fviz_contrib(X = mtcars_pca,choice = 'var',axes = 1) # First
b <- fviz_contrib(X = mtcars_pca,choice = 'var',axes = 2) # Second
grid.arrange(a,b, ncol=2, top='Contribution of the variables to the first two PCs')
library(gridExtra)
grid.arrange(a,b, ncol=2, top='Contribution of the variables to the first two PCs')
autoplot(mtcars_pca)
library(ggplot2)
autoplot(mtcars_pca)
fviz_pca(X = mtcars_pca)
fviz_pca_biplot(X = mtcars_pca)
fviz_pca_biplot(X = mtcars_pca,axes = 1:2)
fviz_pca_biplot(X = mtcars_pca,axes = 1:3)
fviz_pca_biplot(X = mtcars_pca,axes = 2:3)
fviz_pca_biplot(X = mtcars_pca,axes = 3:4)
fviz_pca_biplot(X = mtcars_pca,axes = 1:4)
fviz_pca_biplot(X = mtcars_pca,axes = 1:4,geom = 'point')
fviz_pca_biplot(X = mtcars_pca,axes = 3:4,geom = 'point')
fviz_pca_biplot(X = mtcars_pca,axes = 1:2)
fviz_pca(X = mtcars_pca)
fviz_pca_biplot(X = mtcars_pca,)
fviz_pca_var(X = mtcars_pca)
fviz_pca_ind(X = mtcars_pca)
fviz_pca_var(X = mtcars_pca) # Variables
fviz_pca_ind(X = mtcars_pca)
fviz_pca_biplot(X = mtcars_pca,)
fviz_pca_ind(X = mtcars_pca) ## Individual
agridat::aastveit.barley.covs
agridat::adugna.sorghum
agridat::adugna.sorghum %>% View()
agridat::allcroft.lodging
agridat::alwan.lamb
agridat::arankacami.groundnut.uniformity
agridat::yan.winterwheat
agridat::wheatley.carrot
metan::data_ge
metan::data_ge2
library(metan)
## Load the data
data("data_ge2")
summary(data_ge2)
skimr::skim(mtcars)
skimr::skim(data_ge2)
dat_pca <- prcomp(data_ge2, scale. = TRUE)
data_ge2 %>%
select(-c(ENV,REP)) %>%
group_by(GEN) %>%
column_to_rownames(var = 'GEN')
data_ge2 %>%
select(-c(ENV,REP)) %>%
group_by(GEN) %>%
summarise_all(.funs = ~.) %>%
column_to_rownames(var = 'GEN')
data_ge2 %>%
select(-c(ENV,REP)) %>%
group_by(GEN) %>%
summarise_all(.funs = mean) %>%
column_to_rownames(var = 'GEN')
data_ge2 <-
data_ge2 %>%
select(-c(ENV,REP)) %>%
group_by(GEN) %>%
summarise_all(.funs = mean) %>%
column_to_rownames(var = 'GEN')
dat_pca <- prcomp(data_ge2, scale. = TRUE)
print(mtcars_pca)
summary(mtcars_pca)
print(dat_pca)
summary(dat_pca)
eig.val<-get_eigenvalue(dat_pca)
eig.val
fviz_screeplot(dat_pca, col.var="blue",addlabels = TRUE)
var <- get_pca_var(dat_pca)
var
a <- fviz_contrib(X = dat_pca,choice = 'var',axes = 1) # First
b <- fviz_contrib(X = dat_pca,choice = 'var',axes = 2) # Second
fviz_contrib(X =dat_pca,choice = 'var',axes = 1:2)
grid.arrange(a,b, ncol=2, top='Contribution of the variables to the first two PCs')
fviz_pca_biplot(X = dat_pca)
fviz_pca_var(X = dat_pca) # Variables
fviz_pca_ind(X = dat_pca) ## Individual
get_pca_ind(res.pca = dat_pca)
var <- get_pca_ind(dat_pca)
var
corrplot::corrplot(var$cos2, is.corr=FALSE)
corrplot::corrplot(var$cos2, is.corr=T)
corrplot::corrplot(var$cos2, is.corr=FALSE)
ggfortify::ggbiplot(plot.data = dat_pca)
ggfortify::ggbiplot(plot.data = mtcars_pca)
?ggfortify::ggbiplot()
ggfortify::ggbiplot(plot.data = iris,colour = iris$Species)
library(usethis) # This line loads the usethis package into R memory
use_course("https://github.com/BB1464/workshop-introduction-to-R/archive/refs/heads/master.zip")
